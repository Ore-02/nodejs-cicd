name: Nodejs CI/CD with Docker

on:
  push:
    branches: [ "main" ]

env:                   
  IMAGE_NAME: oreay/nodejs-cicd:1.0
  IMAGE_ARTIFACT: nodejs-cicd.tar

jobs:

  test-code:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: npm install
    - name: Run unit tests
      run: npm test

  build-image:
    runs-on: ubuntu-latest
    needs: test-code
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: Save Docker Image as Artifact
        run: docker save -o $IMAGE_ARTIFACT $IMAGE_NAME

      - name: Upload Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ${{ env.IMAGE_ARTIFACT }}


  test-image:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i $IMAGE_ARTIFACT

      - name: Run container from image
        run: |
          docker run -d --name temp-container -p 3000:3000 $IMAGE_NAME
      
      - name: Wait for app to boot
        run: sleep 10
      
      - name: Health Check
        run: |
          curl --fail http://localhost:3000 || (echo " Health check failed!" && exit 1)
      - name: Stop container
        if: always()
        run: docker rm -f temp-container || true

      - name: Save Tested Docker Image as Artifact
        run: docker save -o $IMAGE_ARTIFACT $IMAGE_NAME

      - name: Upload Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tested-docker-image
          path: ${{ env.IMAGE_ARTIFACT }}
  
  push-image:
    runs-on: ubuntu-latest
    needs: test-image
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: tested-docker-image

      - name: Load Docker image
        run: docker load -i $IMAGE_ARTIFACT

      - uses: actions/checkout@v4
      - name: Log in to DockerHub
        run: echo "${{ secrets.REGISTRY_PASS }}" | docker login -u "${{ secrets.REGISTRY_USER }}" --password-stdin
      - name: Push Image
        run: docker push $IMAGE_NAME
